#!/bin/sh
#
# Copyright (c) 2017,2019 Hannes von Haugwitz
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
# THE SOFTWARE.

usage() {
    [ -n "${2}" ] && printf '%s: %s\n' "$(basename "${0}")" "${2}"
    printf 'usage: %s [-f interfaces_file] [bondinterface=]interface[:state][,bondslave2[:bondstate2]...] ...\n' "$(basename "${0}")"
    exit "${1}"
}

merge_result() {
    if [ "${RETURN_CODE}" -eq "0" ] && [ "${1}" -gt "0" ]; then
        MESSAGE=
    fi
    if [ "${1}" -gt "0" ] || [ "${RETURN_CODE}" -eq "0" ]; then
        MESSAGE="${MESSAGE} ${INTERFACE}[${2}]"
    fi
    [ "${RETURN_CODE}" -lt "${1}" ] && RETURN_CODE=${1}
}

check_bonding_interface() {
    BOND_INTERFACE="${1%%=*}"
    SLAVES="${1#*=}"
    check_interface "${BOND_INTERFACE}" 2
    IFS=','; for SLAVE in ${SLAVES}; do
        check_interface "${SLAVE}" 1
    done
}

check_interface() {
    INTERFACE="${1%%:*}"
    EXPECTED_STATE="${1#*:}"
    if [ -d "/sys/class/net/${INTERFACE}" ]; then
        if [ "$(cat "/sys/class/net/${INTERFACE}/carrier" 2> /dev/null)" = "1" ]; then
            if [ "${EXPECTED_STATE}" = "down" ]; then
                merge_result "${2}" "up"
            elif [ -n "${EXPECTED_STATE}" ] && [ "${EXPECTED_STATE}" != "${1}" ]; then
                INTERFACE_SPEED="$(cat "/sys/class/net/${INTERFACE}/speed" 2> /dev/null)"
                if [ -n "${INTERFACE_SPEED}" ] ; then
                    if [ -n "${INTERFACE_SPEED}" ]; then
                        if [ "${INTERFACE_SPEED}" -eq "${EXPECTED_STATE}" ]; then
                            merge_result 0 "${INTERFACE_SPEED}Mb/s"
                        else
                            merge_result 1 "${INTERFACE_SPEED}Mb/s != ${EXPECTED_STATE}Mb/s"
                        fi
                    fi
                else
                    merge_result 1 "invalid speed"
                fi
            else
                merge_result 0 "up"
            fi
        else
            if [ "${EXPECTED_STATE}" != "down" ]; then
                merge_result "${2}" "down"
            else
                merge_result 0 "down"
            fi
        fi
    else
        merge_result 2 "not available"
    fi
}

RETURN_CODE=0
MESSAGE=
IFACES=

while test ${#} -gt 0 ; do
    case ${1} in
        -h)
            usage 0
            ;;
        -f)
            [ -r "${2}" ] || usage 1 "cannot access '${2}'" 1>&2
            while read -r LINE ; do
                [ -n "${LINE}" ] && IFACES="${IFACES} ${LINE}"
            done < "${2}"
            shift
            ;;
        -*)
            usage 1 "unknown option '${1}'" 1>&2
            ;;
        *)
            IFACES="${IFACES} ${1}"
            ;;
    esac
    shift
done

[ -z "${IFACES}" ] && usage 1 "missing interface" 1>&2

for IFACE in ${IFACES} ; do
    case ${IFACE} in
        *=*)
            check_bonding_interface "${IFACE}"
            ;;
        *)
            check_interface "${IFACE}" 2
            ;;
    esac
done

case "${RETURN_CODE}" in
    0)
        printf 'OK:%s\n' "${MESSAGE}"
        ;;
    1)
        printf 'WARNING:%s\n' "${MESSAGE}"
        ;;
    2)
        printf 'CRITICAL:%s\n' "${MESSAGE}"
        ;;
    3)
        printf 'UNKNOWN:%s\n' "${MESSAGE}"
        ;;
esac

exit "${RETURN_CODE}"
